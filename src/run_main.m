set_input;%% solution of the ode system for a fixed induction coef and temperature% H-H model parameters setupbasic_params = [A, t_start, t_stop, ...    E_Na, E_K, E_L, gbar_Na, gbar_K, gbar_L, ...     C_m, T];% induction parameters setupinduction_params = [k, a, b, k1, k2];% initial conditions and simulation time setupy0 = [V0, m0, h0, n0, phi0];t_span = [0, t_stop];[t, y] = ode45(@(t, y) ...     HodgkinHuxley(t, y, basic_params, induction_params, is_periodic), ...    t_span, y0);if is_periodic    iinj = Iinj_periodic(A/10, 0, A, 0, 100/t_stop, t, t_start, t_stop);else    iinj = Iinj(A, t, t_start, t_stop);endfig1 = figure('renderer', 'painters', 'position', [100, 200, 800, 800]);subplot(3,1,1)plot(t, iinj, 'b-', 'linewidth', 2);xlabel('t [ms]'), ylabel('I [uA/cm^2]');title('applied current, I(t)');ylim([min(iinj) - 0.1*max(iinj), 1.1*max(iinj)]);grid on;subplot(3,1,2)plot(t, y(:,1), 'b-');xlabel('t [ms]'), ylabel('V [mV]');title('action potential in time, V(t)');ylim([min(y(:,1)) - 0.1*max(y(:,1)), 1.1*max(y(:,1))]);grid on;subplot(3,1,3)p = plot(t, y(:,2), 'b-', t, y(:,3), 'k--', t, y(:,4), 'r:');p(3).LineWidth = 2;xlabel('t [ms]'), ylabel('n');title('activation parameters dynamics');ylim([min(y(:,2)) - 0.1*max(y(:,2)), 1.1*max(y(:,2))]);legend('m(t)', 'h(t)', 'n(t)');grid on;if save_figures    figname = fullfile(figdir, ['AcPotDyn', ...        '_tsim-', num2str(t_span(2)), ...        '_tIinj-', num2str(t_start), '-', num2str(t_stop), ...        '_noise-', num2str(is_periodic), ...        '_T-', num2str(T), ...        '_k-', num2str(k)]);    savefig(fig1, [figname, '.fig']);    saveas(fig1, [figname, '.eps']);end %% limit cycles for the previous scenariofig2 = figure('renderer', 'painters', 'position', [100, 200, 950, 400]);subplot(1,3,1)plot(y(:,1), y(:,2), 'b-');xlabel('V [mV]'), ylabel('m');title('m(V)');grid on;subplot(1,3,2)plot(y(:,1), y(:,3), 'b-');xlabel('V [mV]'), ylabel('h');title('h(V)');grid on;subplot(1,3,3)plot(y(:,1), y(:,4), 'b-');xlabel('V [mV]'), ylabel('n');title('n(V)');grid on;if save_figures    figname = fullfile(figdir, ['limit_cycles', ...        '_tsim-', num2str(t_span(2)), ...        '_tIinj-', num2str(t_start), '-', num2str(t_stop), ...        '_noise-', num2str(is_periodic), ...        '_T-', num2str(T), ...        '_k-', num2str(k)]);    savefig(fig2, [figname, '.fig']);    saveas(fig2, [figname, '.eps']);end